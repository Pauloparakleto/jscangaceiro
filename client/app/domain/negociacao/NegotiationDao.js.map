{"version":3,"sources":["../../../app-src/domain/negociacao/NegotiationDao.js"],"names":["NegotiationDao","constructor","connection","_connection","_store","add","negotiation","Promise","resolve","reject","request","transaction","objectStore","onsuccess","e","onerror","console","log","target","error","clearIndex","clear","listAll","negotiations","cursor","openCursor","current","result","Negociacao","value","_date","_quantidade","_valor","push","continue"],"mappings":";;;;;;UAAaA,c,GAAN,MAAMA,cAAN,CAAqB;AAC1BC,oBAAaC,UAAb,EAAwB;AACtB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,cAAd;AACD;;AAEDC,YAAIC,WAAJ,EAAgB;AACd,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKP,WAAL,CACTQ,WADS,CACG,CAAC,KAAKP,MAAN,CADH,EACkB,WADlB,EAETQ,WAFS,CAEG,KAAKR,MAFR,EAEgBC,GAFhB,CAEoBC,WAFpB,CAAhB;;AAIAI,oBAAQG,SAAR,GAAoBC,KAAKN,SAAzB;AACAE,oBAAQK,OAAR,GAAkBD,KAAK;AACrBE,sBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,qBAAO,8CAAP;AACD,aAHD;AAID,WAVM,CAAP;AAWD;;AAEDW,qBAAY;AACV,iBAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKP,WAAL,CACTQ,WADS,CACG,CAAC,KAAKP,MAAN,CADH,EACkB,WADlB,EAETQ,WAFS,CAEG,KAAKR,MAFR,EAEgBiB,KAFhB,EAAhB;;AAIAX,oBAAQG,SAAR,GAAoBC,KAAKN,SAAzB;AACAE,oBAAQK,OAAR,GAAkBD,KAAK;AACrBE,sBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,qBAAO,+CAAP;AACD,aAHD;AAID,WAVM,CAAP;AAWD;;AAEDa,kBAAS;AACP,iBAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMc,eAAe,EAArB;AACA,kBAAMC,SAAS,KAAKrB,WAAL,CACRQ,WADQ,CACI,CAAC,KAAKP,MAAN,CADJ,EACmB,WADnB,EAERQ,WAFQ,CAEI,KAAKR,MAFT,EAGRqB,UAHQ,EAAf;;AAKAD,mBAAOX,SAAP,GAAmBC,KAAK;AACtB,oBAAMY,UAAUZ,EAAEI,MAAF,CAASS,MAAzB;AACA,kBAAID,OAAJ,EAAa;AACX,sBAAMpB,cAAc,IAAIsB,UAAJ,CAClBF,QAAQG,KAAR,CAAcC,KADI,EAElBJ,QAAQG,KAAR,CAAcE,WAFI,EAGlBL,QAAQG,KAAR,CAAcG,MAHI,CAApB;AAKAT,6BAAaU,IAAb,CAAkB3B,WAAlB;AACAoB,wBAAQQ,QAAR;AACD,eARD,MAQO;AACL1B,wBAAQe,YAAR;AACD;AACF,aAbD;;AAeAC,mBAAOT,OAAP,GAAiBD,KAAK;AACpBE,sBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,qBAAO,0CAAP;AACD,aAHD;AAID,WA1BM,CAAP;AA2BD;AA9DyB,O","file":"NegotiationDao.js","sourcesContent":["export class NegotiationDao {\n  constructor (connection){\n    this._connection = connection;\n    this._store = 'negotiations';\n  }\n\n  add(negotiation){\n    return new Promise((resolve, reject) => {\n      const request = this._connection\n            .transaction([this._store], 'readwrite')\n            .objectStore(this._store).add(negotiation);\n\n      request.onsuccess = e => resolve();\n      request.onerror = e => {\n        console.log(e.target.error);\n        reject('It was not possible to save this negotiation');\n      };\n    });\n  }\n\n  clearIndex(){\n    return new Promise((resolve, reject) => {\n      const request = this._connection\n            .transaction([this._store], 'readwrite')\n            .objectStore(this._store).clear();\n\n      request.onsuccess = e => resolve();\n      request.onerror = e => {\n        console.log(e.target.error);\n        reject('It was not possible to clear all negotiations');\n      };\n    });\n  }\n\n  listAll(){\n    return new Promise((resolve, reject) => {\n      const negotiations = [];\n      const cursor = this._connection\n            .transaction([this._store], 'readwrite')\n            .objectStore(this._store)\n            .openCursor();\n\n      cursor.onsuccess = e => {\n        const current = e.target.result;\n        if (current) {\n          const negotiation = new Negociacao(\n            current.value._date,\n            current.value._quantidade,\n            current.value._valor,\n          );\n          negotiations.push(negotiation);\n          current.continue();\n        } else {\n          resolve(negotiations);\n        }\n      }\n\n      cursor.onerror = e => {\n        console.log(e.target.error);\n        reject('In was not possible to list negotiations');\n      }\n    });\n  }\n}\n"]}